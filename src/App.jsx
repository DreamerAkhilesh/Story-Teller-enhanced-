import React, { useState, useRef, useEffect } from "react";
import { GoogleGenAI } from "@google/genai";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";

const ai = new GoogleGenAI({
  apiKey: import.meta.env.VITE_GEMINI_API_KEY,
});

function App() {
  const [prompt, setPrompt] = useState("");
  const [story, setStory] = useState("");
  const [images, setImages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [speechRate, setSpeechRate] = useState(1);
  const [currentPage, setCurrentPage] = useState(0);
  const storyRef = useRef(null);

  const generateStoryAndImages = async () => {
    if (!prompt.trim()) return;
    setLoading(true);
    setStory("");
    setImages([]);

    try {
      const response = await ai.models.generateContent({
        model: "gemini-2.0-flash-preview-image-generation",
        contents: [
          {
            role: "user",
            parts: [
              { text: `Write a short story and illustrate it with 5 related and animated images:
                        For each scene, generate a corresponding animated-style illustration that:
                        Clearly represents the specific moment in the story.
                        Uses a consistent art style, color palette, and character design across all images.
                        Shows visual continuity, so the images relate to each other (e.g., same character, same environment, recurring objects).
                        Is engaging, whimsical, and slightly animated, like a high-quality cartoon or animated movie still.
                        Label each image with its story scene (e.g., Page 1: Beginning, Page 2: Discovery, Page 3: Encounter, etc.) so that together, the images visually narrate the story as well as the text does.
                        There should only be 5 paragraphs and images in the story.(mandatory)
                        Print the story only not image details: ${prompt}` },
            ],
          },
        ],
        config: {
          responseModalities: ["TEXT", "IMAGE"],
        },
      });

      // Safely access candidates
      const candidates =
        response?.candidates || response?.response?.candidates || [];

      if (candidates.length === 0) {
        setStory("⚠️ No candidates returned. Try changing your prompt.");
        return;
      }

      const imgs = [];
      let text = "";

      candidates.forEach((c) => {
        c.content.parts.forEach((p) => {
          if (p.text) {
            text += p.text + "\n";
          }
          if (p.inlineData?.mimeType?.startsWith("image/")) {
            imgs.push(
              `data:${p.inlineData.mimeType};base64,${p.inlineData.data}`
            );
          }
        });
      });

      setStory(text.trim());
      setImages(imgs);
      setCurrentPage(0); // Start at cover page
    } catch (err) {
      console.error("Error:", err);
      setStory("⚠️ Failed to generate content. Check console.");
    } finally {
      setLoading(false);
    }
  };

  const generatePDF = async () => {
    if (!story && images.length === 0) {
      alert("Please generate a story first!");
      return;
    }

    try {
      // Custom dimensions to match book UI display (16:9 aspect ratio, similar to screen)
      const pageWidth = 800; // 800 points = ~11.1 inches
      const pageHeight = 600; // 600 points = ~8.3 inches
      
      const pdf = new jsPDF({
        orientation: 'landscape',
        unit: 'pt',
        format: [pageWidth, pageHeight]
      });

      const margin = 40;
      const leftPageWidth = (pageWidth - (3 * margin)) / 2;
      const rightPageWidth = (pageWidth - (3 * margin)) / 2;

      // Cover Page
      pdf.setFillColor(41, 128, 185);
      pdf.rect(0, 0, pageWidth, pageHeight, 'F');
      
      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(48);
      pdf.setFont("helvetica", "bold");
      pdf.text("AI Generated Story", pageWidth / 2, pageHeight / 2 - 60, { align: "center" });
      
      pdf.setFontSize(24);
      pdf.setFont("helvetica", "normal");
      pdf.text("A Magical Journey", pageWidth / 2, pageHeight / 2, { align: "center" });
      
      pdf.setFontSize(18);
      pdf.text("Generated by Gemini AI", pageWidth / 2, pageHeight / 2 + 40, { align: "center" });
      
      const today = new Date().toLocaleDateString('en-US', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      });
      pdf.text(`Created on: ${today}`, pageWidth / 2, pageHeight / 2 + 80, { align: "center" });

      // Story Pages (Two-page spreads)
      for (let i = 0; i < totalPages; i++) {
        pdf.addPage();
        
        // Left Page - Image
        if (images[i]) {
          try {
            const img = new Image();
            img.src = images[i];
            
            await new Promise((resolve) => {
              img.onload = async () => {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                
                // Calculate image dimensions to fit left page with high quality
                const maxWidth = leftPageWidth - 20;
                const maxHeight = pageHeight - (2 * margin) - 60; // Space for caption
                const scale = Math.min(maxWidth / img.width, maxHeight / img.height);
                
                // Use higher resolution for better quality
                const targetWidth = img.width * scale;
                const targetHeight = img.height * scale;
                
                canvas.width = targetWidth;
                canvas.height = targetHeight;
                
                // Enable image smoothing for better quality
                ctx.imageSmoothingEnabled = true;
                ctx.imageSmoothingQuality = 'high';
                
                ctx.drawImage(img, 0, 0, targetWidth, targetHeight);
                
                // Center image on left page
                const xPos = margin + 10;
                const yPos = margin + 60; // Space for caption
                
                // Add image caption
                pdf.setTextColor(0, 0, 0);
                pdf.setFontSize(20);
                pdf.setFont("helvetica", "bold");
                pdf.text(`Scene ${i + 1}`, xPos + (leftPageWidth - 20) / 2, yPos - 20, { align: "center" });
                
                // Add high-quality image
                const imgData = canvas.toDataURL('image/jpeg', 1.0); // Maximum quality
                pdf.addImage(imgData, 'JPEG', xPos, yPos, targetWidth, targetHeight);
                
                resolve();
              };
            });
          } catch (error) {
            console.error(`Error processing image ${i}:`, error);
          }
        }

        // Right Page - Text
        if (storyParagraphs[i]) {
          pdf.setTextColor(0, 0, 0);
          pdf.setFontSize(24);
          pdf.setFont("helvetica", "bold");
          pdf.text(`Page ${i + 1}`, pageWidth - margin - rightPageWidth / 2, margin + 40, { align: "center" });
          
          pdf.setFontSize(16);
          pdf.setFont("helvetica", "normal");
          
          // Split paragraph into lines that fit the right page width
          const textLines = pdf.splitTextToSize(storyParagraphs[i], rightPageWidth - 40);
          
          let yPos = margin + 80;
          for (let j = 0; j < textLines.length; j++) {
            if (yPos > pageHeight - margin) break;
            pdf.text(textLines[j], pageWidth - margin - rightPageWidth + 20, yPos);
            yPos += 24; // Better line spacing
          }
        }

        // Add page number at bottom
        pdf.setFontSize(14);
        pdf.setTextColor(100, 100, 100);
        pdf.text(`${i + 1}`, pageWidth / 2, pageHeight - 20, { align: "center" });
      }

      // Save the PDF
      pdf.save("ai-story-book.pdf");
      alert("High-quality story book PDF generated successfully! Check your downloads folder.");
    } catch (error) {
      console.error("Error generating PDF:", error);
      alert("Failed to generate PDF. Please try again.");
    }
  };

  const speakStory = () => {
    if (!story) {
      alert("Please generate a story first!");
      return;
    }

    if (isSpeaking) {
      window.speechSynthesis.cancel();
      setIsSpeaking(false);
      return;
    }

    // Check if speech synthesis is supported
    if (!window.speechSynthesis) {
      alert("Text-to-speech is not supported in your browser. Please use Chrome, Edge, or Safari.");
      return;
    }

    try {
      const utterance = new SpeechSynthesisUtterance(story);
      utterance.rate = speechRate;
      utterance.pitch = 1;
      utterance.volume = 1;

      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);
      utterance.onerror = (event) => {
        console.error("Speech synthesis error:", event);
        setIsSpeaking(false);
        alert("Text-to-speech failed. Please try again.");
      };

      window.speechSynthesis.speak(utterance);
    } catch (error) {
      console.error("Error starting speech synthesis:", error);
      alert("Failed to start text-to-speech. Please try again.");
    }
  };

  const stopSpeaking = () => {
    window.speechSynthesis.cancel();
    setIsSpeaking(false);
  };

  const nextPage = () => {
    const totalPages = Math.max(images.length, story.split('\n\n').filter(p => p.trim()).length);
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1);
    }
  };

  const prevPage = () => {
    if (currentPage > 0) {
      setCurrentPage(currentPage - 1);
    }
  };

  const goToPage = (page) => {
    setCurrentPage(page);
  };

  // Split story into paragraphs
  const storyParagraphs = story ? story.split('\n\n').filter(p => p.trim()) : [];
  const totalPages = Math.max(images.length, storyParagraphs.length);

  useEffect(() => {
    return () => {
      if (isSpeaking) {
        window.speechSynthesis.cancel();
      }
    };
  }, [isSpeaking]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-4 flex flex-col items-center">
      <div className="text-center mb-4">
        <h1 className="text-3xl font-bold mb-2 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
          📚 AI Story Book Creator
        </h1>
        <p className="text-gray-600 text-base">Transform your ideas into beautiful illustrated stories</p>
      </div>
      
      <div className="w-full max-w-2xl mb-4">
        <textarea
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder="Enter your story prompt... (e.g., 'Write a story about a magical forest adventure')"
          className="w-full p-3 border-2 border-gray-200 rounded-xl mb-3 resize-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          rows="3"
        />
        <button
          onClick={generateStoryAndImages}
          disabled={loading}
          className="w-full px-6 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl font-semibold text-base disabled:opacity-50 disabled:cursor-not-allowed hover:from-blue-700 hover:to-purple-700 transform hover:scale-105 transition-all duration-200 shadow-lg"
        >
          {loading ? (
            <div className="flex items-center justify-center gap-2">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
              Creating Your Story...
            </div>
          ) : (
            '✨ Generate Story & Images'
          )}
        </button>
      </div>

      {/* Enhanced Book Mode Display */}
      {story || images.length > 0 ? (
        <div className="w-full max-w-7xl mx-auto">
          {/* Cover Page */}
          {currentPage === 0 && (
            <div className="bg-gradient-to-br from-blue-600 via-purple-600 to-indigo-700 text-white p-8 rounded-2xl shadow-2xl text-center min-h-[400px] flex flex-col justify-center book-cover relative overflow-hidden">
              {/* Background Pattern */}
              <div className="absolute inset-0 opacity-10">
                <div className="absolute top-8 left-8 w-16 h-16 border-2 border-white rounded-full"></div>
                <div className="absolute top-16 right-16 w-12 h-12 border-2 border-white rounded-full"></div>
                <div className="absolute bottom-16 left-16 w-10 h-10 border-2 border-white rounded-full"></div>
                <div className="absolute bottom-8 right-8 w-20 h-20 border-2 border-white rounded-full"></div>
              </div>
              
              <h1 className="text-4xl font-bold mb-4 text-shadow-lg">AI Generated Story</h1>
              <h2 className="text-2xl mb-6 opacity-90">A Magical Journey</h2>
              <p className="text-lg mb-6 opacity-80">Crafted by Gemini AI</p>
              <div className="text-base opacity-70 bg-white bg-opacity-10 px-4 py-2 rounded-full inline-block">
                {new Date().toLocaleDateString('en-US', { 
                  weekday: 'long', 
                  year: 'numeric', 
                  month: 'long', 
                  day: 'numeric' 
                })}
              </div>
            </div>
          )}

          {/* Story Pages */}
          {currentPage > 0 && currentPage <= totalPages && (
            <div className="flex gap-6">
              {/* Left Page - Image */}
              <div className="flex-1 bg-white p-6 rounded-2xl shadow-xl page-flip border border-gray-100">
                <h3 className="text-xl font-bold mb-4 text-center text-gray-700 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                  Scene {currentPage}
                </h3>
                {images[currentPage - 1] && (
                  <div className="flex justify-center">
                    <img
                      src={images[currentPage - 1]}
                      alt={`Scene ${currentPage}`}
                      className="max-w-full h-auto rounded-xl shadow-lg border-4 border-gray-100 max-h-[300px] object-contain"
                    />
                  </div>
                )}
              </div>

              {/* Right Page - Text */}
              <div className="flex-1 bg-white p-6 rounded-2xl shadow-xl page-flip border border-gray-100">
                <h3 className="text-xl font-bold mb-4 text-center text-gray-700 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                  Page {currentPage}
                </h3>
                <div className="prose max-w-none">
                  <p className="text-gray-800 text-lg leading-relaxed font-medium max-h-[300px] overflow-y-auto">
                    {storyParagraphs[currentPage - 1] || 'No content available for this page.'}
                  </p>
                </div>
              </div>
            </div>
          )}
        </div>
      ) : (
        <div className="w-full max-w-2xl text-center py-10">
          <p className="text-gray-600 text-lg">
            Please generate a story and images to view the book.
          </p>
        </div>
      )}

      {/* Enhanced Controls */}
      {(story || images.length > 0) && (
        <div className="w-full max-w-6xl mx-auto mt-4">
          {/* Book Navigation Controls */}
          <div className="bg-white p-4 rounded-2xl shadow-lg border border-gray-100 mb-4">
            <div className="flex flex-wrap gap-3 justify-center items-center">
              <button
                onClick={prevPage}
                disabled={currentPage === 0}
                className="px-4 py-2 bg-gradient-to-r from-gray-600 to-gray-700 text-white rounded-xl font-semibold disabled:opacity-50 disabled:cursor-not-allowed hover:from-gray-700 hover:to-gray-800 transform hover:scale-105 transition-all duration-200 shadow-md book-nav-btn"
              >
                ⬅️ Previous
              </button>
              
              <div className="flex items-center gap-2 bg-gray-50 px-4 py-2 rounded-xl">
                <span className="text-gray-700 font-medium text-sm">Page:</span>
                <span className="text-lg font-bold text-blue-600">
                  {currentPage === 0 ? 'Cover' : currentPage} / {totalPages}
                </span>
              </div>
              
              <button
                onClick={nextPage}
                disabled={currentPage >= totalPages}
                className="px-4 py-2 bg-gradient-to-r from-gray-600 to-gray-700 text-white rounded-xl font-semibold disabled:opacity-50 disabled:cursor-not-allowed hover:from-gray-700 hover:to-gray-800 transform hover:scale-105 transition-all duration-200 shadow-md book-nav-btn"
              >
                Next ➡️
              </button>
            </div>
            
            {/* Page Jump Buttons */}
            <div className="flex justify-center mt-3">
              <div className="flex gap-2 flex-wrap justify-center">
                {Array.from({ length: Math.min(totalPages + 1, 10) }, (_, i) => (
                  <button
                    key={i}
                    onClick={() => goToPage(i)}
                    className={`px-3 py-1 rounded-lg font-medium transition-all duration-200 page-indicator text-sm ${
                      currentPage === i 
                        ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg' 
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300 hover:scale-105'
                    }`}
                  >
                    {i === 0 ? '📖 Cover' : i}
                  </button>
                ))}
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-wrap gap-3 justify-center">
            <button
              onClick={generatePDF}
              className="px-4 py-2 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-xl font-semibold hover:from-green-700 hover:to-emerald-700 transform hover:scale-105 transition-all duration-200 shadow-lg text-sm"
            >
              📄 Export to PDF
            </button>
            
            <div className="flex items-center gap-2">
              <button
                onClick={speakStory}
                className={`px-4 py-2 rounded-xl font-semibold transition-all duration-200 shadow-lg transform hover:scale-105 text-sm ${
                  isSpeaking 
                    ? 'bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 text-white' 
                    : 'bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white'
                }`}
              >
                {isSpeaking ? '🔇 Stop Speaking' : '🔊 Read Aloud'}
              </button>
              
              {isSpeaking && (
                <button
                  onClick={stopSpeaking}
                  className="px-3 py-2 bg-gradient-to-r from-gray-600 to-gray-700 text-white rounded-xl font-semibold hover:from-gray-700 hover:to-gray-800 transform hover:scale-105 transition-all duration-200 shadow-lg text-sm"
                >
                  ⏹️ Stop
                </button>
              )}
            </div>
            
            <div className="flex items-center gap-2 bg-white px-3 py-2 rounded-xl shadow-md border border-gray-100">
              <label className="text-gray-700 font-medium text-sm">Speed:</label>
              <input
                type="range"
                min="0.5"
                max="2"
                step="0.1"
                value={speechRate}
                onChange={(e) => setSpeechRate(parseFloat(e.target.value))}
                className="w-20 accent-blue-600"
              />
              <span className="text-gray-700 font-semibold min-w-[2.5rem] text-sm">{speechRate}x</span>
            </div>
          </div>
        </div>
      )}

      {/* Loading State */}
      {loading && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-2xl shadow-2xl text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-4 border-blue-600 mx-auto mb-3"></div>
            <h3 className="text-lg font-semibold text-gray-800 mb-2">Creating Your Story</h3>
            <p className="text-gray-600 text-sm">AI is crafting your story and illustrations...</p>
          </div>
        </div>
      )}
    </div>
  );
}

export default App;
